import os
import json
import re
import base64
import requests
from pathlib import Path
from filelock import FileLock
import logging
from datetime import datetime, timedelta
import csv

from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, CommandHandler, filters


def push_to_github():
    """–ó–∞–ª–∏–≤–∞–µ—Ç data.json –≤ —Ç–≤–æ–π GitHub"""
    token = os.getenv("GITHUB_TOKEN")
    if not token:
        print("‚ö†Ô∏è GITHUB_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é –ø—É—à")
        return

    repo = "vsachilov/stepper-bot"  # ‚ö†Ô∏è –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    path = "data.json"
    message = "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —à–∞–≥–æ–≤"

    try:
        with open(path, "r", encoding="utf-8") as f:
            content = f.read()
        content_b64 = base64.b64encode(content.encode("utf-8")).decode("utf-8")

        url = f"https://api.github.com/repos/{repo}/contents/{path}"
        headers = {"Authorization": f"token {token}"}

        r = requests.get(url, headers=headers)
        sha = r.json().get("sha")

        data = {
            "message": message,
            "content": content_b64,
            "branch": "main",
        }
        if sha:
            data["sha"] = sha

        response = requests.put(url, headers=headers, json=data)
        if response.status_code in (200, 201):
            print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ GitHub")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ GitHub:", response.text)
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É—à–µ –≤ GitHub:", e)


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

DATA_FILE = Path("data.json")
LOCK_FILE = str(DATA_FILE) + ".lock"

# --- —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ ---
def load_data():
    if not DATA_FILE.exists():
        return {}
    with FileLock(LOCK_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)

def save_data(data):
    with FileLock(LOCK_FILE):
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)

# --- —Ä–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è #—à–∞–≥–∏ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—Å—Ç–∞ ---
STEP_RE = re.compile(r'#—à–∞–≥–∏\s+(\d+)\s+(\d{2}\.\d{2})', re.IGNORECASE)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return

    # –∏—â–µ–º —Ç–µ–∫—Å—Ç –ª–∏–±–æ –≤ –æ–±—ã—á–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –ª–∏–±–æ –≤ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ
    text = update.message.text or update.message.caption
    if not text:
        return

    match = STEP_RE.search(text)  # –∏—â–µ–º —Ç–µ–≥ –≥–¥–µ —É–≥–æ–¥–Ω–æ
    if not match:
        return

    steps = int(match.group(1))
    day_month = match.group(2)
    year = datetime.now().year

    try:
        date_obj = datetime.strptime(f"{day_month}.{year}", "%d.%m.%Y")
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π –î–î.MM (–Ω–∞–ø—Ä–∏–º–µ—Ä: 01.10)")
        return

    date_str = date_obj.strftime("%Y-%m-%d")
    user = update.effective_user
    user_id = str(user.id)
    username = user.username or f"{user.first_name or ''} {user.last_name or ''}".strip()

    data = load_data()
    if user_id not in data:
        data[user_id] = {"username": username, "records": []}
    else:
        data[user_id]["username"] = username
        if "records" not in data[user_id]:
            data[user_id]["records"] = []

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
    existing = next((r for r in data[user_id]["records"] if r["date"] == date_str), None)
    if existing:
        existing["steps"] = steps
    else:
        data[user_id]["records"].append({"date": date_str, "steps": steps})

    save_data(data)
    push_to_github()
    await update.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å–∞–ª {steps} —à–∞–≥–æ–≤ –∑–∞ {date_obj.strftime('%d.%m.%y')} –¥–ª—è {username}")

# --- –∫–æ–º–∞–Ω–¥—ã ---
async def cmd_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    if not data:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return

    totals = []
    for uid, info in data.items():
        records = info.get("records", [])
        total = sum(r["steps"] for r in records)
        totals.append((info.get("username", "?"), total))

    totals.sort(key=lambda x: x[1], reverse=True)
    text_lines = [f"{i+1}. {u}: {t}" for i, (u, t) in enumerate(totals)]
    await update.message.reply_text("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n" + "\n".join(text_lines))

async def cmd_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    data = load_data()
    records = data.get(user_id, {}).get("records", [])
    if not records:
        await update.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return

    records = sorted(records, key=lambda r: r["date"])
    text_lines = [f"{datetime.strptime(r['date'], '%Y-%m-%d').strftime('%d.%m.%y')}: {r['steps']}" for r in records]
    await update.message.reply_text("üìÖ –í—Å—è —Ç–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è —à–∞–≥–æ–≤:\n" + "\n".join(text_lines))

async def cmd_missed(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    data = load_data()
    records = sorted(data.get(user_id, {}).get("records", []), key=lambda r: r["date"])
    if not records:
        await update.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return

    dates_recorded = {r["date"] for r in records}
    start_date = datetime.strptime(records[0]["date"], "%Y-%m-%d")
    end_date = datetime.strptime(records[-1]["date"], "%Y-%m-%d")

    missed_days = []
    current = start_date
    while current <= end_date:
        d_str = current.strftime("%Y-%m-%d")
        if d_str not in dates_recorded:
            missed_days.append(current.strftime("%d.%m.%y"))
        current += timedelta(days=1)

    if not missed_days:
        await update.message.reply_text("üéâ –ù–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π! –ú–æ–ª–æ–¥–µ—Ü!")
    else:
        await update.message.reply_text("‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–Ω–∏:\n" + "\n".join(missed_days))

async def cmd_export(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    lines = [["username", "date", "steps"]]

    for uid, info in data.items():
        username = info.get("username", "?")
        for r in info.get("records", []):
            lines.append([username, r["date"], r["steps"]])

    filename = "steps_export.csv"
    with open(filename, "w", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerows(lines)

    await update.message.reply_text(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω: {filename}")

async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —à–∞–≥–∞–º–∏ –≤–∏–¥–∞:\n"
        "#—à–∞–≥–∏ 1234 01.10\n\n"
        "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–º–µ—Å—Ç–µ —Å —Ñ–æ—Ç–æ.\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/stats ‚Äî –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/history ‚Äî —Ç–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è\n"
        "/missed ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–Ω–∏\n"
        "/export ‚Äî –≤—ã–≥—Ä—É–∑–∫–∞ –≤ CSV"
    )

# --- –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
def main():
    token = os.getenv("TG_TOKEN")
    if not token:
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TG_TOKEN —Å —Ç–æ–∫–µ–Ω–æ–º –±–æ—Ç–∞.")
        return

    app = ApplicationBuilder().token(token).build()

    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CommandHandler("stats", cmd_stats))
    app.add_handler(CommandHandler("history", cmd_history))
    app.add_handler(CommandHandler("missed", cmd_missed))
    app.add_handler(CommandHandler("export", cmd_export))

    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND) | filters.PHOTO, handle_message))

    print("–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    app.run_polling()
